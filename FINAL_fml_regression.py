# -*- coding: utf-8 -*-
"""FML_Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IDbbLXvAOL04yMidAjcpOnFWBmr1-4c-
"""

from google.colab import files
files.upload();

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error

data = pd.read_csv('synthetic_steel_dataset.csv')
data = data.dropna()

data

# -*- coding: utf-8 -*-
"""Untitled26.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QvD5IW9s8WwpcK4iUTqWFQIZR1A9Dcbw
"""


# Load the steel dataset (replace 'steel_dataset.csv' with your actual dataset)
#data = pd.read_csv('steel_dataset.csv')

# Split the dataset into features (composition) and target (properties)
X = data.drop(columns=['Yield_Strength', 'Tensile_Strength', 'elongation'])
y_yield = data['Yield_Strength']
y_tensile = data['Tensile_Strength']
y_hardness = data['elongation']

# Split the data into training and testing sets
X_train, X_test, y_yield_train, y_yield_test, y_tensile_train, y_tensile_test, y_hardness_train, y_hardness_test = train_test_split(
    X, y_yield, y_tensile, y_hardness, test_size=0.2, random_state=42)

# Define a function to train and evaluate a machine learning model
def train_and_evaluate_model(X_train, y_train, X_test, y_test):
    model = RandomForestRegressor(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    #mse = mean_squared_error(y_test, y_pred)
    return model, mse

# Train models and optimize properties
yield_model, mse_yield = train_and_evaluate_model(X_train, y_yield_train, X_test, y_yield_test)
tensile_model, mse_tensile = train_and_evaluate_model(X_train, y_tensile_train, X_test, y_tensile_test)
hardness_model, mse_hardness = train_and_evaluate_model(X_train, y_hardness_train, X_test, y_hardness_test)

# print("Mean Squared Error for Yield Strength:", mse_yield)
# print("Mean Squared Error for Tensile Strength:", mse_tensile)
# print("Mean Squared Error for Hardness:", mse_hardness)

# Use the trained models to optimize alloy compositions (e.g., using optimization algorithms)
# This part requires domain knowledge and specific optimization techniques

# Example: Generate a random alloy composition
random_composition = {
    'Carbon': 0.02,
    'Silicon': 0.05,
    'Manganese': 30,
    'Other Elements':99.88
}

# Predict properties for the random composition using trained models
yield_strength_prediction = yield_model.predict(pd.DataFrame([random_composition]))
tensile_strength_prediction = tensile_model.predict(pd.DataFrame([random_composition]))
hardness_prediction = hardness_model.predict(pd.DataFrame([random_composition]))

print("Predicted Yield Strength for Random Composition:", yield_strength_prediction[0])
print("Predicted Tensile Strength for Random Composition:", tensile_strength_prediction[0])
print("Predicted Elongation for Random Composition:", hardness_prediction[0])


# Further research and optimization steps would require additional expertise and techniques.

from sklearn.metrics import r2_score

# Define a function to train and evaluate a machine learning model
def train_and_evaluate_model(X_train, y_train, X_test, y_test):
    model = RandomForestRegressor(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    r2 = r2_score(y_test, y_pred)
    return model, r2

# Train models and optimize properties
yield_model, r2_yield = train_and_evaluate_model(X_train, y_yield_train, X_test, y_yield_test)
tensile_model, r2_tensile = train_and_evaluate_model(X_train, y_tensile_train, X_test, y_tensile_test)
hardness_model, r2_hardness = train_and_evaluate_model(X_train, y_hardness_train, X_test, y_hardness_test)

# Print R-squared scores
print("R-squared for Yield Strength:", r2_yield)
print("R-squared for Tensile Strength:", r2_tensile)
print("R-squared for Hardness:", r2_hardness)

from sklearn.svm import SVR

# -*- coding: utf-8 -*-
"""Untitled26.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QvD5IW9s8WwpcK4iUTqWFQIZR1A9Dcbw
"""


# Load the steel dataset (replace 'steel_dataset.csv' with your actual dataset)
#data = pd.read_csv('steel_dataset.csv')

# Split the dataset into features (composition) and target (properties)
X = data.drop(columns=['Yield_Strength', 'Tensile_Strength', 'elongation'])
y_yield = data['Yield_Strength']
y_tensile = data['Tensile_Strength']
y_hardness = data['elongation']

# Split the data into training and testing sets
X_train, X_test, y_yield_train, y_yield_test, y_tensile_train, y_tensile_test, y_hardness_train, y_hardness_test = train_test_split(
    X, y_yield, y_tensile, y_hardness, test_size=0.2, random_state=42)

# Define a function to train and evaluate a machine learning model
def train_and_evaluate_model(X_train, y_train, X_test, y_test):
    model = SVR(kernel='linear', C=1.0, epsilon=0.2)  # You can adjust the kernel type and hyperparameters
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    #mse = mean_squared_error(y_test, y_pred)
    return model


# Train models and optimize properties
yield_model = train_and_evaluate_model(X_train, y_yield_train, X_test, y_yield_test)
tensile_model = train_and_evaluate_model(X_train, y_tensile_train, X_test, y_tensile_test)
hardness_model = train_and_evaluate_model(X_train, y_hardness_train, X_test, y_hardness_test)

# print("Mean Squared Error for Yield Strength:", mse_yield)
# print("Mean Squared Error for Tensile Strength:", mse_tensile)
# print("Mean Squared Error for Hardness:", mse_hardness)

# Use the trained models to optimize alloy compositions (e.g., using optimization algorithms)
# This part requires domain knowledge and specific optimization techniques

# Example: Generate a random alloy composition
random_composition = {
    'Carbon': 0.02,
    'Silicon': 0.05,
    'Manganese': 30,
    'Other Elements':99.88
}

# Predict properties for the random composition using trained models
yield_strength_prediction = yield_model.predict(pd.DataFrame([random_composition]))
tensile_strength_prediction = tensile_model.predict(pd.DataFrame([random_composition]))
hardness_prediction = hardness_model.predict(pd.DataFrame([random_composition]))

print("Predicted Yield Strength for Random Composition:", yield_strength_prediction[0])
print("Predicted Tensile Strength for Random Composition:", tensile_strength_prediction[0])
print("Predicted Elongation for Random Composition:", hardness_prediction[0])


# Further research and optimization steps would require additional expertise and techniques.